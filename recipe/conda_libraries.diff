--- setup.py.bak	2024-02-13 21:00:52
+++ setup.py	2024-02-13 21:01:18
@@ -49,7 +49,7 @@
     # search for nvcc
     app_name = 'nvcc.exe' if platform.system() == "Windows" else 'nvcc'
     nvcc, home = None, None
-    for p in ['CUDA_PATH', 'CUDA_HOME', 'CUDAHOME']:
+    for p in ['CUDA_PATH', 'CUDA_HOME', 'CUDAHOME', 'BUILD_PREFIX', 'PREFIX']:
         if p in os.environ:
             if os.path.exists(pjoin(os.environ[p], 'bin', app_name)):
                 nvcc = pjoin(os.environ[p], 'bin', app_name)
@@ -105,23 +105,15 @@
     extra_compile_args = ['-std=c++11', '-Wno-format-security',
                           f'-DVKFFT_MAX_FFT_DIMENSIONS={VKFFT_MAX_FFT_DIMENSIONS}']
     extra_link_args = None
-    if platform.system() == 'Darwin':
-        libraries = None
-        extra_link_args = ['-Wl,-framework,OpenCL']
-    elif platform.system() == "Windows":
+    if platform.system() == "Windows":
         # Add include & lib dirs if possible from usual nvidia and AMD paths
-        for path in ["CUDA_HOME", "CUDAHOME", "CUDA_PATH"]:
-            if path in os.environ:
-                include_dirs.append(pjoin(os.environ[path], 'include'))
-                library_dirs.append(pjoin(os.environ[path], 'lib', 'x64'))
-        library_dirs.append(pjoin(os.path.dirname(find_in_path('cl.exe', os.environ['PATH'])).split('bin')[0],
-                                  'lib', 'x64'))
+        include_dirs.append(os.environ["LIBRARY_INC"])
+        library_dirs.append(os.environ["LIBRARY_LIB"])
         libraries = ['OpenCL']
         extra_compile_args = [f'/DVKFFT_MAX_FFT_DIMENSIONS={VKFFT_MAX_FFT_DIMENSIONS}']
     else:
-        # Linux
+        # Linux and macOS
         libraries = ['OpenCL']
-        extra_link_args = ['--shared']
 
     if 'CONDA_PREFIX' in os.environ:
         include_dirs.append(f"{os.environ['CONDA_PREFIX']}/include")
